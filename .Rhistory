str(survey)
#setting a seed for the random number generator
defaultW <- getOption("warn")
options(warn = -1)
set.seed(6436237)
#look at different clusters with different numbers of centers
clusterKmean <- kmeans(survey[,3:10], centers = 2, nstart=25)
clusplot(survey[,-1], clusterKmean$cluster, meain="2d representation of clustering with 2 centers", color=TRUE, shade=TRUE, labels=2, lines=0)
clusterKmean <- kmeans(survey[,3:10], centers = 3, nstart=25)
clusplot(survey[,-1], clusterKmean$cluster, meain="2d representation of clustering with 3 centers", color=TRUE, shade=TRUE, labels=2, lines=0)
clusterKmean <- kmeans(survey[,3:10], centers = 4, nstart=25)
clusplot(survey[,-1], clusterKmean$cluster, meain="2d representation of clustering with 4 centers", color=TRUE, shade=TRUE, labels=2, lines=0)
clusterKmean <- kmeans(survey[,3:10], centers = 5, nstart=25)
pca <- prcomp(survey[,3:10], scale = FALSE)
pca.plotting <- data.frame(X=pca$x[,1], Y=pca$x[,2], Z=pca$x[,3])
scatterplot3d(pca.plotting$X,pca.plotting$Y,pca.plotting$Z,
type= "h",
angle = 55,
main = "3D plot of PCA data",
xlab = "PC1",
ylab="pc2",
zlab="pc3",
grid=TRUE,
col.grid = "blue")
eucl.dist <- dist(survey[,2:10], method="euclidean")
fviz_dist(eucl.dist, order = FALSE)
fviz_dist(eucl.dist)
fviz_dend(hclust(eucl.dist),k=4)
manhat.dist <- dist(survey[,2:10], method="manhattan")
fviz_dist(manhat.dist)
fviz_dend(hclust(manhat.dist),k=5)
corr.dist <- get_dist(survey[,3:10], method="pearson")
fviz_dist(corr.dist)
fviz_dend(hclust(corr.dist),k=5)
manhat.dist <- dist(survey[,2:10], method="manhattan")
fviz_dist(manhat.dist)
fviz_dend(hclust(manhat.dist),k=5)
eucl.dist <- dist(survey[,3:10], method="euclidean")
fviz_dist(eucl.dist, order = FALSE)
fviz_dist(eucl.dist)
fviz_dend(hclust(eucl.dist),k=4)
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
fviz_dend(hclust(manhat.dist),k=5)
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
#fviz_dend(hclust(manhat.dist),k=5)
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
supress_warnings(fviz_dend(hclust(manhat.dist),k=5))
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
supresswarnings(fviz_dend(hclust(manhat.dist),k=5))
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
supressWarnings(fviz_dend(hclust(manhat.dist),k=5))
manhat.dist <- dist(survey[,3:10], method="manhattan")
fviz_dist(manhat.dist)
suppressWarnings(fviz_dend(hclust(manhat.dist),k=5))
corr.dist <- get_dist(survey[,3:10], method="pearson")
fviz_dist(corr.dist)
suppressWarnings(fviz_dend(hclust(corr.dist),k=5))
corr.dist
corr.dist <- get_dist(survey[,3:10], method="pearson")
fviz_dist(corr.dist)
suppressWarnings(fviz_dend(hclust(corr.dist),k=5))
View(survey)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
install.packages("ggvis")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
update.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
install.packages(c("colorspace", "digest", "fansi", "generics", "htmltools", "lubridate", "readr", "rlang", "stringi", "tibble", "tidyr", "utf8", "xfun"))
install.packages(c("colorspace", "digest", "fansi", "generics", "htmltools", "lubridate", "readr", "rlang", "stringi", "tibble", "tidyr", "utf8", "xfun"))
install.packages(c("colorspace", "digest", "fansi", "generics", "htmltools", "lubridate", "readr", "rlang", "stringi", "tibble", "tidyr", "utf8", "xfun"))
install.packages(c("colorspace", "digest", "fansi", "generics", "htmltools", "lubridate", "readr", "rlang", "stringi", "tibble", "tidyr", "utf8", "xfun"))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(htmltools)
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(htmltools)
install.packages(c("digest", "fansi", "htmltools", "rlang", "tibble", "utf8", "xfun"))
install.packages(c("digest", "fansi", "htmltools", "rlang", "tibble", "utf8", "xfun"))
library(htmltools)
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
wifidata <- read.table("wifi_localization.txt", header=FALSE)
View(wifidata)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
#importing the data, it is a tab deliminated file, so importing as a table works the best
wifidata <- read.table("wifi_localization.txt", header=FALSE)
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7")
View(wifidata)
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
View(wifidata)
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short1 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
options(warn=-1)
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
#importing the data, it is a tab deliminated file, so importing as a table works the best
wifidata <- read.table("wifi_localization.txt", header=FALSE)
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
ind
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
wifidata.training <- data[ind==1]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.trainLabels
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.testLabels
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
TestLabelsDF <- data.frame(wifidata.testLabels)
TestLabelsDF
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(data.testLabels, wifidata_model)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing,merge)
View(wifidata.testing)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing ,merged)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
head(finaldata)
CrossTable(x = data.testLabels, y = wifidata_model, prop.chisq=FALSE)
CrossTable(x = wifidata.testLabels, y = wifidata_model, prop.chisq=FALSE)
View(finaldata)
rm(list=ls())
train <- read.csv("nonameTrain.csv")
test <- read.csv("nonameTest.csv")
library(tidyverse)
library(caret)
train$Transported = as.factor(train$Transported)
View(ddajob_results)
ggplot(ddajob_results$plsProbs)
ggplot(ddajob_results$plsProbs)
ggplot(ddajob_results$gbmFit1)
View(ddajob_results)
ddajob_results$y
asstring(ddajob_results$y)O
asstring(ddajob_results$y)
rm(list=ls())
train <- read.csv("nonameTrain.csv")
setwd("~/spaceship-titanic")
rm(list=ls())
train <- read.csv("nonameTrain.csv")
test <- read.csv("nonameTest.csv")
library(tidyverse)
library(caret)
train$Transported = as.factor(train$Transported)
summary(train)
preProcValues <- preProcess(train, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, train)
set.seed(1623)
vec <- createDataPartition(
y=trainTransformed$Transported,
p=.75,
list=FALSE
)
faketrain <- trainTransformed[vec,]
faketest <- trainTransformed[-vec,]
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
gbmFit1 <- train(Transported ~ ., data = faketrain,
method = "multinom",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
tunelength = 20
)
plsProbs <- predict(gbmFit1, newdata = faketest, type = "prob")
eldata <- plsProbs %>% mutate(prediction = True>False)
eldata$cake = ifelse(eldata$prediction==TRUE, "True", "False")
eldata$cake <- as.factor(eldata$cake)
merged <- mutate(eldata, Transported = faketest$Transported)
y <- confusionMatrix(data = merged$cake, reference = merged$Transported)
y
fileConn<- file("outputs\\multinomoutput.txt")
writeLines(toString(y), fileConn)
close(fileConn)
save.image(file='Models\\multinomModel.RData')
rm(list=ls())
train <- read.csv("nonameTrain.csv")
test <- read.csv("nonameTest.csv")
library(tidyverse)
library(caret)
train$Transported = as.factor(train$Transported)
summary(train)
preProcValues <- preProcess(train, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, train)
set.seed(623)
vec <- createDataPartition(
y=trainTransformed$Transported,
p=.75,
list=FALSE
)
faketrain <- trainTransformed[vec,]
faketest <- trainTransformed[-vec,]
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
gbmFit1 <- train(Transported ~ ., data = faketrain,
method = "multinom",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
tunelength = 20
)
plsProbs <- predict(gbmFit1, newdata = faketest, type = "prob")
eldata <- plsProbs %>% mutate(prediction = True>False)
eldata$cake = ifelse(eldata$prediction==TRUE, "True", "False")
eldata$cake <- as.factor(eldata$cake)
merged <- mutate(eldata, Transported = faketest$Transported)
y <- confusionMatrix(data = merged$cake, reference = merged$Transported)
y
fileConn<- file("outputs\\multinomoutput.txt")
writeLines(toString(y), fileConn)
close(fileConn)
save.image(file='Models\\multinomModel.RData')
