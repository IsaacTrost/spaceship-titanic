wifidata <- read.table("wifi_localization.txt", header=FALSE)
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7")
View(wifidata)
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
View(wifidata)
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short1 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
options(warn=-1)
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
#importing the data, it is a tab deliminated file, so importing as a table works the best
wifidata <- read.table("wifi_localization.txt", header=FALSE)
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
ind
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
wifidata.training <- data[ind==1]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.trainLabels
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.testLabels
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
TestLabelsDF <- data.frame(wifidata.testLabels)
TestLabelsDF
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(data.testLabels, wifidata_model)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing,merge)
View(wifidata.testing)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing ,merged)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
head(finaldata)
CrossTable(x = data.testLabels, y = wifidata_model, prop.chisq=FALSE)
CrossTable(x = wifidata.testLabels, y = wifidata_model, prop.chisq=FALSE)
#Spacy
rm(list=ls())
setwd("./spaceship-titanic/")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(tidyverse)
library(caret)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(deck = as.factor(deck), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side)) %>%
mutate(side = as.factor(side))
summary(train1)
summary(thingy)
thingy = select(train1, firstID, secondID, Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck, firstnamelength, lastnamelength, Transported)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
thingy = select(train1, -first1, -first2, -first3, -first4, -first5, -first6, -first7, -last1, -last2, -last3, -last4, -last5, -last6, -last7, -last8, -last9, -last10, -last11)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "adaboost",
allowParallel = TRUE)
plsProbs <- predict(model.cv, newdata = faketest, type = "prob")
eldata <- plsProbs %>% mutate(prediction = True>False)
eldata$cake = ifelse(eldata$prediction==TRUE, "True", "False")
eldata$cake <- as.factor(eldata$cake)
merged <- mutate(eldata, Transported = faketest$Transported)
confusionMatrix(data = merged$cake, reference = merged$Transported)
asstring(confusionMatrix(data = merged$cake, reference = merged$Transported))
as_string(confusionMatrix(data = merged$cake, reference = merged$Transported))
string(confusionMatrix(data = merged$cake, reference = merged$Transported))
AsString(confusionMatrix(data = merged$cake, reference = merged$Transported))
to_string(confusionMatrix(data = merged$cake, reference = merged$Transported))
to_str(confusionMatrix(data = merged$cake, reference = merged$Transported))
print(confusionMatrix(data = merged$cake, reference = merged$Transported))
y = print(confusionMatrix(data = merged$cake, reference = merged$Transported))
y
print(type(y))
print(findtype(y))
print(AsType(y))
confusionMatrix
??confusionMatrix
train2 <- model.matrix(train1)
train2 <- model.matrix(train1$HomePlanet)
train2 <- model.matrix(train1, HomePlanet)
train2 <- model.matrix(train1, data =HomePlanet)
train2 <- dummyVars(" ~ .", data = train)
View(train2)
View(train2)
train2
dmy <- dummyVars(" ~ .", data = train)
train2 <- data.frame(predict(dmy, newdata = train))
train2
View(train2)
rm(list=ls())
setwd("./spaceship-titanic/")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(tidyverse)
library(caret)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
#mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
#mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side)) %>%
#mutate(side = as.factor(side))
summary(train1)
dmy <- dummyVars(" ~ .", data = train2)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
#mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
#mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side)) %>%
#mutate(side = as.factor(side))
summary(train1)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/")
#mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
#mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side)) %>%
#mutate(side = as.factor(side))
summary(train1)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as_numeric(firstID), secondID = as.numeric(secondID))
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID))
summary(train1)
train2 <- train1 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = train2)
train2 <- data.frame(predict(dmy, newdata = train))
train3 <- data.frame(predict(dmy, newdata = train2))
View(train3)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
#mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
#mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
#mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num))
train2 <- train1 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = train2)
train3 <- data.frame(predict(dmy, newdata = train2))
View(train)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side))
summary(train1)
train2 <- train1 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = train2)
train3 <- data.frame(predict(dmy, newdata = train2))
View(train3)
rm(list=ls())
setwd("./spaceship-titanic/")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(tidyverse)
library(caret)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side))
summary(train1)
train2 <- train1 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = train2)
train3 <- data.frame(predict(dmy, newdata = train2))
test1 <- test %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side))
test2 <- test2 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = test2)
test3 <- data.frame(predict(dmy, newdata = test2))
test2 <- test1 %>% select(-lastname, -firstname)
dmy <- dummyVars(" ~ .", data = test2)
test3 <- data.frame(predict(dmy, newdata = test2))
test1 <- test %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side))
test2 <- test1 %>% select(-lastname, -firstname, -Transported)
dmy <- dummyVars(" ~ .", data = test2)
test3 <- data.frame(predict(dmy, newdata = test2))
test3$Transported = as.factor(test1$Transported)
View(test2)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
separate(Cabin, into = c("deck", "num", "side"), sep = "/") %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID), num = as.numeric(num)) %>%
mutate(is_homeless = ifelse(is.na(num), "True", "False")) %>%
mutate(is_homeless = as.factor(is_homeless), num = ifelse(is.na(num), -1, num), side = ifelse(is.na(side), "TrashCompactor", side))
summary(train1)
train2 <- train1 %>% select(-lastname, -firstname, -Transported)
dmy <- dummyVars(" ~ .", data = train2)
train3 <- data.frame(predict(dmy, newdata = train2))
train3$Transported = as.factor(train1$Transported)
write.csv(train3,"CleanData/nonameTrain.csv", row.names = FALSE)
write.csv(train3,"CleanData\\nonameTrain.csv", row.names = FALSE)
write.csv(train3,"C:\Users\wisaa\OneDrive\Documents\spaceship-titanic\CleanData\nonameTrain.csv", row.names = FALSE)
write.csv(test3,"\CleanData\\nonameTest.csv", row.names = FALSE)
write.csv(train3,"C:\\Users\\wisaa\\OneDrive\\Documents\\spaceship-titanic\\CleanData\\nonameTrain.csv", row.names = FALSE)
write.csv(train3,"nonameTrain.csv", row.names = FALSE)
write.csv(test3,"nonameTest.csv", row.names = FALSE)
rm(list=ls())
train <- read.csv("nonameTrain.csv")
test <- read.csv("nonameTest.csv")
library(tidyverse)
library(caret)
summary(train)
nearZeroVar(train)
#finding corralations
descrCor <-  cor(train)
train$Transported = as.factor(train$Transported)
#finding corralations
descrCor <-  cor(train)
#finding corralations
descrCor <-  cor(select(train, -Transported))
highCorr <- sum(abs(descrCor[upper.tri(descrCor)]) > .999)
comboInfo <- findLinearCombos(train)
