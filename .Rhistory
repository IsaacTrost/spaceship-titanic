str(wifidata)
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short1 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/wisaa/OneDrive/Desktop/RCode")
options(warn=-1)
rm(list=ls())
library(class)
library(gridExtra)
library(tidyverse)
library(ggvis)
library(gmodels)
library(caret)
library(GGally)
#importing the data, it is a tab deliminated file, so importing as a table works the best
wifidata <- read.table("wifi_localization.txt", header=FALSE)
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
#naming the columns
names(wifidata) <- c("router1", "router2","router3","router4","router5","router6","router7", "room")
#testing to make sure everything is in order
summary(wifidata)
str(wifidata)
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
wifidata %>% ggvis(x=~router1, y=~router2, fill = ~room) %>% layer_points()
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#spliting the variables to make them simpler to see.
short1 <- wifidata[, c(1:4,8)]
short2 <- wifidata[, c(5:7,8)]
#creating the plots
ggpairs(short1, aes(color = as.character(room)))
ggpairs(short2, aes(color = as.character(room)))
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
ind
#setting a psudorandom seed
set.seed(1732472)
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
wifidata.training <- data[ind==1]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.trainLabels
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
wifidata.testLabels
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
wifidata_model
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
TestLabelsDF <- data.frame(wifidata.testLabels)
TestLabelsDF
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(data.testLabels, wifidata_model)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing,merge)
View(wifidata.testing)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing ,merged)
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
#setting a psudorandom seed
set.seed(1732472)
#creating a list of random numbers to create the training and testing sets
ind <- sample(2, nrow(wifidata), replace=TRUE, prob=c(.65,.35))
#creating training and testing sets
wifidata.training <- wifidata[ind==1, 1:8]
wifidata.testing <- wifidata[ind==2, 1:8]
#creating the labels to test later
wifidata.trainLabels <- wifidata[ind==1,8]
wifidata.testLabels <- wifidata[ind==2,8]
#actually creating the model
wifidata_model <- knn(train = wifidata.training, test = wifidata.testing, cl = wifidata.trainLabels, k=3)
#creating a df for merging
TestLabelsDF <- data.frame(wifidata.testLabels)
#creating the full dataframe
merged <- data.frame(wifidata.testLabels, wifidata_model)
names <- colnames(wifidata.testing)
#merge the merge and testing dataset together.
finaldata <- cbind(wifidata.testing, merged)
names(finaldata) <- c(names, "observed room", "predicted room")
head(finaldata)
CrossTable(x = data.testLabels, y = wifidata_model, prop.chisq=FALSE)
CrossTable(x = wifidata.testLabels, y = wifidata_model, prop.chisq=FALSE)
install.packages("caret")
chooseCRANmirror()
install.packages("caret")
??caret
faketraining <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
library(caret)
faketraining <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11))
#Spacy
rm(list=ls())
setwd("./spaceship-titanic/")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(tidyverse)
library(caret)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11))
train1$RoomService <- ifelse(is.na(train1$RoomService), )
set.seed(3512)
faketraining <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
View(faketraining)
createDataPartition
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketest <- train1[-vec]
faketrain <- train1[vec]
faketest
View(train1)
faketrain <- train1[vec,]
faketest <- train1[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "lasso",
trControl = fitControl)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck))
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck))
summary(train1)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck)) %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID))
summary(train1)
thingy = select(train1, firstID, secondID, Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck, firstnamelength, lastnamelength, Transported)
View(thingy)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "lasso",
trControl = fitControl)
summary(thingy)
train1 <- train %>% separate(PassengerId, into=c("firstID", "secondID"), sep = "_") %>%
mutate(HomePlanet=as.factor(HomePlanet), CryoSleep=as.factor(CryoSleep), Destination = as.factor(Destination), VIP = as.factor(VIP), Transported = as.factor(Transported)) %>%
separate(Name, into = c("firstname", "lastname"), sep=" ") %>%
mutate(firstname = ifelse(is.na(firstname), " ", firstname), lastname = ifelse(is.na(lastname), " ", lastname)) %>%
mutate(firstnamelength = nchar(firstname), lastnamelength = nchar(lastname)) %>%
separate(firstname, into=c("firstspace","first1", "first2", "first3", "first4", "first5", "first6", "first7"), sep = "") %>%
separate(lastname, into=c("lastspace", "last1", "last2", "last3", "last4", "last5", "last6", "last7", "last8", "last9", "last10", "last11"), sep = "") %>%
mutate(firstspace = NULL, lastspace = NULL, first1 = as.factor(first1), first2 = as.factor(first2), first3 = as.factor(first3), first4 = as.factor(first4), first5 = as.factor(first5), first6 = as.factor(first6), first7 = as.factor(first7)) %>%
mutate(last1 = as.factor(last1), last2 = as.factor(last2), last3 = as.factor(last3), last4 = as.factor(last4), last5 = as.factor(last5), last6 = as.factor(last6), last7 = as.factor(last7), last8 = as.factor(last8), last9 = as.factor(last9), last10 = as.factor(last10), last11 = as.factor(last11)) %>%
mutate(hadRS = is.na(RoomService), hadFC = is.na(FoodCourt), hadSPA = is.na(Spa), hadMALL = is.na(ShoppingMall), hadVR = is.na(VRDeck)) %>%
mutate(RoomService = ifelse(is.na(RoomService), 0, RoomService), FoodCourt = ifelse(is.na(FoodCourt), 0, FoodCourt), Spa = ifelse(is.na(Spa), 0, Spa), ShoppingMall = ifelse(is.na(ShoppingMall), 0, ShoppingMall), VRDeck = ifelse(is.na(VRDeck), 0, VRDeck), Age = ifelse(is.na(Age), mean(Age, na.rm = TRUE), Age)) %>%
mutate(firstID = as.numeric(firstID), secondID = as.numeric(secondID))
summary(train1)
thingy = select(train1, firstID, secondID, Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck, firstnamelength, lastnamelength, Transported)
summary(thingy)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "lasso",
trControl = fitControl)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "pls",
trControl = fitControl)
plsProbs <- predict(model.cv, newdata = "faketest", type = "prob")
View(faketest)
plsProbs <- predict(model.cv, newdata = faketest, type = "prob")
View(plsProbs)
confusionMatric(data = model.cv, testing$Transported)
confusionMatrix(data = model.cv, testing$Transported)
confusionMatrix(data = model.cv, faketest$Transported)
confusionMatrix(data = plsProbs, faketest$Transported)
faketest$Transported = as.factor(faketest$Transported)
confusionMatrix(data = plsProbs, faketest$Transported)
thingy <- ifelse(thingy[[Transported]], lvl[1], lvl[2])
thingy$Transported <- as.factor(thingy$Transported)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "pls",
trControl = fitControl)
plsProbs <- predict(model.cv, newdata = faketest, type = "prob")
faketest$Transported = as.factor(faketest$Transported)
confusionMatrix(data = plsProbs, faketest$Transported)
thingy = select(train1, firstID, secondID, Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck, firstnamelength, lastnamelength, Transported)
set.seed(3512)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "pls",
trControl = fitControl)
plsProbs <- predict(model.cv, newdata = faketest, type = "prob")
faketest$Transported = as.factor(faketest$Transported)
eldata <- plsProbs %>% mutate(prediction = ifelse(True>False))
eldata <- plsProbs %>% mutate(prediction = ifelse(True>False), TRUE, FALSE)
eldata <- plsProbs %>% mutate(prediction = True>False)
View(eldata)
merged <- merge(eldata, faketest)
merged <- merge(eldata, faketest)
View(merged)
View(merged)
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(precition==TRUE && Transported ==False))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE && Transported ==False))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported ==False))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported ==False, 1, 0))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported ==0, 1, 0))
View(sucess)
summary(sucess)
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% False, 1, 0))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% True, 1, 0))
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% "True", 1, 0))
summary(sucess)
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% "True", 1, 0), trueFalse = ifelse(prediction==FALSE & Transported %in% "False", 1, 0))
summary(sucess)
sucess <- merged %>% select(prediction, Transported) %>% mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% "True", 1, 0), trueFalse = ifelse(prediction==FALSE & Transported %in% "False", 1, 0), falseTrue = ifelse(prediction==TRUE & Transported %in% "False", 1, 0), falseFalse = ifelse(prediction==FALSE & Transported %in% "True", 1, 0))
summary(sucess)
set.seed(13)
vec <- createDataPartition(
y=train1$Transported,
p=.75,
list=FALSE
)
faketrain <- thingy[vec,]
faketest <- thingy[-vec,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "pls",
trControl = fitControl)
plsProbs <- predict(model.cv, newdata = faketest, type = "prob")
faketest$Transported = as.factor(faketest$Transported)
eldata <- plsProbs %>% mutate(prediction = True>False)
merged <- merge(eldata, faketest)
sucess <- merged %>% select(prediction, Transported) %>%
mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% "True", 1, 0), trueFalse = ifelse(prediction==FALSE & Transported %in% "False", 1, 0), falseTrue = ifelse(prediction==TRUE & Transported %in% "False", 1, 0), falseFalse = ifelse(prediction==FALSE & Transported %in% "True", 1, 0))
summary(sucess)
merged <- merge(eldata, faketest, on=index)
merged <- merge(eldata, faketest, by=index)
View(faketest)
View(eldata)
eldata$indexy = index(eldata)
merged <- eldata %>% mutate(Transported = faketest$Transported)
sucess <- merged %>% select(prediction, Transported) %>%
mutate(trueTrue = ifelse(prediction==TRUE & Transported %in% "True", 1, 0), trueFalse = ifelse(prediction==FALSE & Transported %in% "False", 1, 0), falseTrue = ifelse(prediction==TRUE & Transported %in% "False", 1, 0), falseFalse = ifelse(prediction==FALSE & Transported %in% "True", 1, 0))
summary(sucess)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model.cv <- train(Transported ~ .,
data = faketrain,
method = "ada",
trControl = fitControl)
